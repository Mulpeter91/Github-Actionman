name: 4 - Setting & Passing Variables

on:
  push:
    branches: [
        main,
        another-branch
    ]

jobs:
  create-variables:
    name: Creating and passing variables
    runs-on: windows-latest
    outputs:
      dinner: ${{ steps.step_output.outputs.TONIGHTS_DINNER }}
    
    steps:
      #Example 4.1
      - uses: actions/checkout@v2
      
      - name: Use print message composite action
        uses: ./.github/actions/print-message
        with:                                                     # <- With keyword to signify parameters.
          message: "Cobra Kai never dies"                         # <- Named parameter in the called action.
          
      #Example 4.2
      - name: Set variables from environment file
        uses: ./.github/actions/read-env-file
        with:
          filePath: ./.github/variables/variables.env

      #Example 4.3
      - name: Set variables from powershell file
        run: Get-Content ./Powershell/Variables.ps1 >> $Env:GITHUB_ENV
        
      #Example 4.4
      - name: Set local step variable to environment variable
        run: |
          echo "WORKFLOW_VARIABLE=$(echo ${Env:LOCAL_VARIABLE})" >> $Env:GITHUB_ENV
        env:
          LOCAL_VARIABLE: Karate Kid
        
      - name: Inspect Environment Variables
        run: env
        
      #Example 4.5
      - id: step_output
        name: Create variable output from step
        run: |   
          echo "::set-output name=TONIGHTS_DINNER::burrito" 
        
  Obtain-Variables:
    needs: [Create-Variables]       # <- Jobs run concurrently by default. Over this with the 'needs' keyword to set dependents.
    name: Reading previous variables
    runs-on: windows-latest    
    
    steps:
      #Example 4.5
      - name: Print output variable from previous job
        run: |
          Write-Host ${{ Env:needs.create-variables.output.dinner }}